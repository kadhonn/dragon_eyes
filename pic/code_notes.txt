
need timer scaler 1:8 to hopefully reliable wait for it
do not use internal pullups, they leak too much current


gpios:
GPIO0 = output leds
GPIO1 = input button with external 100kOhm pull-up, this means active_low aka pressed = low/0

MODES_COUNT = 3 //count of different modes we have. mode 0 == sleep needs to be counted as well

vars: 
brightness 0-255 = 0
wanted_brightness 0-255 = 0
update_delay_counter 0-8 = 8
mode 1-(MODES_COUNT) = MODES_COUNT
button_debounce_counter 0-8 = 8


init:
brightness + wanted_brightness = 0
update_delay_counter = 8 // really? maybe we want an updateLogic immediatelly? TODO check how this works with button init
if is_initial_start //if we get power we do not want to start up, we go to sleep immediatelly and wait for a buttonpress
	sleep
else
	button_detected()
endif

loop:


pwm_loop:
load wanted_brightness into brightness
if brightness zero
	updateLogic()
else 
	turn on lamp
	if brightness < 128 //aka bit 0 of brightness == 0
		waitTillLampOff()
		detect_button()
		updateLogic()
	else
		detect_button()
		updateLogic()
		waitTillLampOff()
	endif
endif
waitTillTimerValue(255)
goto pwm_loop


waitTillLampOff:
waitTillTimerValue(brightness)
turn off lamp



waitTillTimerValue(value)
// has to be less then 8 cycles!



//is called about 490 times per second, we should make a count to 8 before updates to have ~60 frames. IS DEPENDENT ON timer scaler
//has to be less then 128 * 8 cycles!
updateLogic:
update_delay_counter--
if update_delay_counter != 0
	ret
endif

update_delay_counter = 8

//actual logic happens here
if mode == 1
	wanted_brightness++ //for now
else if mode == 2
	wanted_brightness-- //for now
endif





detect_button:
if !button is pressed
	return
else
	//falltrough to below
endif
button_detected:
8 times waitTillTimerValue(255)
wait_till_button_unpressed
8 times waitTillTimerValue(255)
dec mode
if mode == 0
	sleep //mode reset will happen on startup
endif